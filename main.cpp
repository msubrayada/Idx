//
//  main.cpp
//  KnnMHIndex
//
//  Created by Luis Guillermo on 11/05/18.
//  Copyright Â© 2018 Luis Guillermo. All rights reserved.
//

#include <iostream>
//#include "MinHash_App.hpp"
#include "RNG.hpp"
#include "VectorDB.hpp"
//#include "Tools_App.hpp"
#include "knnMHBucketsIndex.hpp"
#include <fstream>
#include <chrono>

using namespace std;
using namespace MetricDB_App;
using namespace Tools_App;
using namespace MinHash_App;

int main(int argc, const char * argv[]) {

    std::ifstream file("savefile.idx");
    std::stringstream buffer;

    buffer << file.rdbuf();
    std::string str = buffer.str();
    std::wstring widestr = std::wstring(str.begin(), str.end());
    wchar_t* T = (wchar_t*)widestr.c_str();



    //wchar_t* DBT=L"112 10 2\n0.1977 0.34111 0.0347584 0.01284 0 0 3.6169e-05 0 0 0 0 0 0 0 0.00141059 7.2338e-05 0 0 0 0 0 0 0 0 0.0584852 0 0.0210142 0.0616319 0 0 0 0 0 0 0 0 0 0 0.00669126 0.0010489 0 0 0.0396412 0 0.0279225 0.0240524 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.053928 0.00115741 0 0 0 0 0 0 0 0 0.0298756 0 0.00329138 0 0 0 0 0 0.0581236 0.00842737 0 0 0 0 0 0 0 0 0 0 0.000578704 0 0 0 0 0 0.0160229 0.000180845 0 0 0 0 0 0 0 0 0 0 0 0\n    0.335938 0.178096 0.109086 0.0185909 0 0 0 0 0 0 0 0 0 0 0.00159144 0.000144676 0 0 0 0 0 0 0 0 0.0167824 0 0.00774016 0.0887225 0 0 0 0 0 0 0 0 0 0 0.00455729 0.00112124 0 0 0.0120081 0 0.00835503 0.0607277 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0360605 0.00448495 0 0 0 0 0 0 0 0 0.00217014 0 0.00484664 0 0 0 0 0 0.0610894 0.0363137 0 0 0 0 0 0 0 0 0 0 0.00180845 0 0 0 0 0 0.00792101 0.00184462 0 0 0 0 0 0 0 0 0 0 0 0\n    0.216471 0.218931 0.106807 0.0466942 0 0 0 0 0 0 0 0 0 0 0.00180845 0.000470197 0 0 0 0 0 0 0 0 0.0274161 0 0.00882523 0.0881438 0 0 0 0 0 0 0 0 0 0 0.00538918 0.00126591 0 0 0.0229311 0 0.0104528 0.0696976 0 0 0 0 0 3.6169e-05 0 0 0 0 0 0 0 0 0 0 0.0437645 0.00509983 0 0 0 0 0 0 0 0 0.00730613 0 0.00517216 0 0 0 0 0 0.0626447 0.0380498 0 0 0 0 0 0 0 0 0 0 0.00177228 0 0 0 0 0 0.00947627 0.00137442 0 0 0 0 0 0 0 0 0 0 0 0\n    0.198966 0.289388 0.0772569 0.0159505 0 0 0 0 0 0 0 0 0 0 0.00217014 0.000217014 0 0 0 0 0 0 0 0 0.0408348 0 0.0154803 0.0794994 0 0 0 0 0 0 0 0 0 0 0.00741464 0.00133825 0 0 0.0372179 0 0.017542 0.0477069 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.05136 0.00379774 0 0 0 0 0 0 0 0 0.0137804 0 0.00470197 0 0 0 0 0 0.0596427 0.021412 0 0 0 0 0 0 0 0 0 0 0.00148293 0 0 0 0 0 0.0122251 0.000614873 0 0 0 0 0 0 0 0 0 0 0 0\n    0.140299 0.254521 0.0991753 0.062717 0 0 0 0 0 0 0 0 0 0 0.00137442 0.000289352 0 0 0 0 0 0 0 0 0.0393157 0 0.0113209 0.0871311 0 0 0 0 3.6169e-05 0 0 0 0 0 0.00506366 0.00144676 0 0 0.0290799 0 0.0139974 0.0689019 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.043873 0.00368924 0 0 0 0 0 0 0 0 0.0176866 0 0.00535301 0 0 0 0 0 0.0615958 0.0387731 0 0 0 0 0 0 0 0 0 0 0.00202546 0 0 0 0 0 0.0113571 0.000976562 0 0 0 0 0 0 0 0 0 0 0 0\n    0.00632957 0.334997 0.111762 0.0783058 0 0 0 0 0 0 0 0 0 0 0.00394242 0.000253183 0 0 0 0 0 0 0 0 0.00553385 0 0.0201461 0.0886502 0 0 0 0 3.6169e-05 0 0 0 0 0 0.0114294 0.0015191 0 0 0.00596788 0 0.0219546 0.100622 0 0 0 0 3.6169e-05 0 0 0 0 0 0 0 0 0 0 0 0.0614873 0.00448495 0 0 0 0 0 0 0 0 0.00184462 0 0.00495515 0 0 0 0 0 0.055447 0.0610171 0 0 0 0 0 0 0 0 0 0 0.0010489 0 0 0 0 0 0.0171441 0.00108507 0 0 0 0 0 0 0 0 0 0 0 0\n    0.426975 0.227756 0.0401837 0.0116102 0 0 3.6169e-05 0 0 0 0 0 0 0 0.00166377 7.2338e-05 0 0 0 0 0 0 0 0 0.0571108 0 0.00752315 0.0317564 0 0 0 0 0 0 0 0 0 0 0.00347222 0.000253183 0 0 0.0398582 0 0.0101273 0.0209418 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0291522 0.00217014 0 0 0 0 0 0 0 0 0.0380859 0 0.00202546 0 0 0 0 0 0.0257161 0.0147208 0 0 0 0 0 0 0 0 0 0 0.000253183 0 0 0 0 0 0.00806568 0.000470197 0 0 0 0 0 0 0 0 0 0 0 0\n    0.0949074 0.398763 0.044958 0.00925926 0 0 0 0 0 0 0 0 0 0 0.00336372 0.000108507 0 0 0 0 0 0 0 0 0.0441623 0 0.029116 0.0733507 0 0 0 0 0 0 0 0 0 0 0.00846354 0.000578704 0 0 0.0422815 0 0.0309968 0.0238715 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.0680339 0.000434028 0 0 0 0 0 0 0 0 0.030816 0 0.00567853 0 0 0 0 0 0.0660446 0.000687211 0 0 0 0 0 0 0 0 0 0 0.00253183 0 0 0 0 0 0.0215929 0 0 0 0 0 0 0 0 0 0 0 0 0\n    0.256402 0.305375 0.0278139 0.0303096 0 0 0 0 0 0 0 0 0 0 0.00253183 0.000108507 0 0 0 0 0 0 0 0 0.0729528 0 0.0168186 0.0339265 0 0 0 0 0 0 0 0 0 0 0.00679977 0.000434028 0 0 0.0463686 0 0.0196759 0.0243417 0 0 0 0 0 3.6169e-05 0 0 0 0 0 0 0 0 0 0 0.0465495 0.000904225 0 0 0 0 0 0 0 0 0.0490813 0 0.00155527 0 0 0 0 0 0.0322266 0.0124783 0 0 0 0 0 0 0 0 0 0 0.000325521 0 0 0 0 0 0.0126591 0.000325521 0 0 0 0 0 0 0 0 0 0 0 0\n    0.0460793 0.144314 0.155888 0.161603 0 0 0 0 0 0 0 0 0 0 0.000687211 0.000253183 0 0 0 0 0 0 0 0 0.0158782 0 0.005136 0.0974754 0 0 0 0 0 0 0 0 0 0 0.00434028 0.00191696 0 0 0.0135995 0 0.00799335 0.14898 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.029333 0.00600405 0 0 0 0 0 0 0 0 0.00578704 0 0.00669126 0 0 0 0 0 0.0525174 0.0845631 0 0 0 0 0 0 0 0 0 0 0.0020978 0 0 0 0 0 0.00708912 0.00177228 0 0 0 0 0 0 0 0 0 0 0 0";
    //wchar_t* MHT=L"10 8\n    1582860671 1076921\n    1293246459 3522326\n    2121729641 1345176\n    706010721 1060632\n    1007314107 1707956\n    157458561 4117364\n    520622673 2007866\n    402499351 1975201\n";
//    string sMHT="10 4\n    1297510563 3896721\n    701704047 1447412\n    1704754705 301185\n    1497747961 270941\n";


    VectorDB DB;
    DB.Build("colors2.ascii.vecs.1000", 10, 1000, 2,112);
//    DB.Load(DBT);
//    cout <<DB.ToString();
//    DB.Load(DB.ToString());
//    cout<<DB.ToString();

//    MinHash MH(1000,8);
//    cout<< MH.ToString();
//    MH.Load(sMHT );
//    cout<< MH.ToString();



    knnMHBuckets idx;
    wcout<< idx.Build(L"colors2.ascii.vecs.1000", L"savefile.idx",10,112,1000, 100, 10, 4, 16);
    //cout<<  Tools:: Array2stream( idx.SearchKNN_Params(DB.Get(100),T) ,16).str()<<endl;


    knnMHBuckets idx2;



    //auto begin = chrono::high_resolution_clock::now();
    cout<<Tools:: Array2stream( idx2.SearchKNN_Params(DB.Get(100),T) ,16).str()<<endl;
    //  cout<<  Tools:: Array2stream( idx2.SearchKNN_Params(DB.Get(100),T) ,16).str()<<endl;
    //  cout<<  Tools:: Array2stream( idx2.SearchKNN_Params(DB.Get(100),T) ,16).str()<<endl;


//    cout<<  Tools:: Array2stream( idx2.SearchKNN(DB.Get(100),DBT,MHT,4,2,4) ,2).str()<<endl;

//    cout<<  Tools:: Array2stream( idx2.SearchKNN(DB.Get(100),DBT,MHT,4,2,4) ,2).str()<<endl;
//    auto end = chrono::high_resolution_clock::now();
//    auto dur = end - begin;
//    auto ms = std::chrono::duration_cast<std::chrono::milliseconds>(dur).count();
//    cout << "Search Time: "<<ms << endl;


    return 0;
}
